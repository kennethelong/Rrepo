---
title: "Exam01"
author: "Kenneth"
format: html
editor: visual
---

# **Data science exam: part 1**

In this first exam exercise you will work with world population data from <https://data.worldbank.org/indicator/SP.POP.TOTL>

You should make a fresh Quarto document and solve the exercises given below. You are allowed to work in groups of at most three people. Please make sure to include all group members as authors of the Quarto file.

Most of the exercises below show a preview of the result that you are supposed to obtain. Of course you should aim at recreating these results, but don’t give up if you don’t get exactly the same. Just explain what you did and argue why you think it is meaningful.

```{r}
## To execute this file the "here" package needs to be installed
## install.packages("here")

## Libraries required to execute this file
library(tidyverse)
library(dplyr)
library(rvest) # For web scraping
library(printr)
library(ggplot2)
```

## **Exercise 1**

Read in the data in the file `world_population.csv` and select/deselect and rename columns so you end up with a tibble (`tbl`) named `wpop_full` with 266 rows and 65 columns with names as shown in the output below (the last column being `2022`). *Hint: Use `skip` in `read_csv` to avoid header lines not containing data or names of data.*

```         
# A tibble: 266 × 65    
country  code  `1960` `1961` `1962` `1963` `1964` `1965` `1966` `1967` `1968`    <chr>    <chr>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  1 Aruba    ABW   5.46e4 5.58e4 5.67e4 5.75e4 5.82e4 5.88e4 5.93e4 5.95e4 5.95e4  2 Africa … AFE   1.31e8 1.34e8 1.38e8 1.42e8 1.46e8 1.50e8 1.54e8 1.58e8 1.63e8  3 Afghani… AFG   8.62e6 8.79e6 8.97e6 9.16e6 9.36e6 9.57e6 9.78e6 1.00e7 1.02e7  4 Africa … AFW   9.73e7 9.93e7 1.01e8 1.04e8 1.06e8 1.08e8 1.11e8 1.13e8 1.16e8  5 Angola   AGO   5.36e6 5.44e6 5.52e6 5.60e6 5.67e6 5.74e6 5.79e6 5.83e6 5.87e6  6 Albania  ALB   1.61e6 1.66e6 1.71e6 1.76e6 1.81e6 1.86e6 1.91e6 1.97e6 2.02e6  7 Andorra  AND   9.44e3 1.02e4 1.10e4 1.18e4 1.27e4 1.36e4 1.45e4 1.57e4 1.71e4  8 Arab Wo… ARB   9.34e7 9.58e7 9.83e7 1.01e8 1.04e8 1.06e8 1.09e8 1.12e8 1.16e8  9 United … ARE   1.33e5 1.41e5 1.49e5 1.57e5 1.65e5 1.74e5 1.83e5 1.91e5 2.14e5 10 Argenti… ARG   2.03e7 2.07e7 2.10e7 2.14e7 2.17e7 2.21e7 2.24e7 2.28e7 2.31e7 # ℹ 256 more rows 
# ℹ 54 more variables: `1969` <dbl>, `1970` <dbl>, `1971` <dbl>, `1972` <dbl>, 
#   `1973` <dbl>, `1974` <dbl>, `1975` <dbl>, `1976` <dbl>, `1977` <dbl>, 
#   `1978` <dbl>, `1979` <dbl>, `1980` <dbl>, `1981` <dbl>, `1982` <dbl>, 
#   `1983` <dbl>, `1984` <dbl>, `1985` <dbl>, `1986` <dbl>, `1987` <dbl>, 
#   `1988` <dbl>, `1989` <dbl>, `1990` <dbl>, `1991` <dbl>, `1992` <dbl>, 
#   `1993` <dbl>, `1994` <dbl>, `1995` <dbl>, `1996` <dbl>, `1997` <dbl>, …
```

```{r}
## Using here to locate preset location
here::here()

## filename <- "Data/world_population.csv"

## ----- ## THERE IS SOMETHING THAT MAY NOT WORK ENTIRELY CORRECTLY ## ----- ##

## Reading the csv file world_population.csv into world_population
world_population <- read_csv("world_population.csv", col_names = TRUE, col_types = NULL , skip = 3)

## Removing column 3 and 4, 48-50 and setting population values as numeric
world_population <- world_population[, c(1:67)]
world_population <- world_population[, -c(3,4)]
world_population <- world_population |>
  mutate(across(3:45, as.numeric))

View(world_population)

final_world_population <- world_population

## Moving row one up as headers and removing the row
wpop_full <- final_world_population |> 
  setNames(as.character(unlist(final_world_population[1, ]))) |>  slice(-1)

head(wpop_full)

View(wpop_full)


```

## **Exercise 2**

Use the package `rvest` to read in the list of country codes from the main table at <https://en.wikipedia.org/wiki/ISO_3166-1> and select/deselect and rename columns so you end up with a tibble (`tbl`) named `iso_codes_all` with 249 rows and 3 columns with names as shown in the output below.

```{r}
wiki_jump <- 'https://en.wikipedia.org/wiki/ISO_3166-1'


##Gets the tables from the url
long_jump <- read_html(wiki_jump)
tbl <- long_jump |>
  html_elements("table") |> # use html_elements() for all tables
  html_table()
tbl |> head()
## The table we need pertaining country name, iso 3 and independence  is the second table
tbl2 <- tbl[[2]]
## removing columns that are not required, iso 2, numeric value and link
tbl2 <- tbl2[, -c(2,4,5)]

## Renaming the column headers
iso_codes_all <- tbl2 |> rename(name = 1) |> rename(iso3 = 2) |> rename(independent = 3)

head(iso_codes_all)

```

## **Exercise 3**

Use `filter()` to extract the independent countries from `iso_codes_all` and save the result as `iso_codes`.

```         
iso_codes
```

```         
# A tibble: 194 × 3    name                iso3  independent    <chr>               <chr> <chr>        1 Afghanistan[b]      AFG   Yes          2 Albania             ALB   Yes          3 Algeria             DZA   Yes          4 Andorra             AND   Yes          5 Angola              AGO   Yes          6 Antigua and Barbuda ATG   Yes          7 Argentina           ARG   Yes          8 Armenia             ARM   Yes          9 Australia           AUS   Yes         10 Austria             AUT   Yes         # ℹ 184 more rows
```

```{r}
## Filtering on value "Yes" in column "independent"
iso_codes <- iso_codes_all |> filter(independent == "Yes")

head(iso_codes)
```

## **Exercise 4**

Use a suitable join (and/or filter) command to make a dataset `wpop` only containing those rows of `wpop_full` which have a matching ISO country code in `iso_codes`:

```         
wpop
```

```         
# A tibble: 193 × 65    country  code  `1960` `1961` `1962` `1963` `1964` `1965` `1966` `1967` `1968`    <chr>    <chr>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  1 Afghani… AFG   8.62e6 8.79e6 8.97e6 9.16e6 9.36e6 9.57e6 9.78e6 1.00e7 1.02e7  2 Angola   AGO   5.36e6 5.44e6 5.52e6 5.60e6 5.67e6 5.74e6 5.79e6 5.83e6 5.87e6  3 Albania  ALB   1.61e6 1.66e6 1.71e6 1.76e6 1.81e6 1.86e6 1.91e6 1.97e6 2.02e6  4 Andorra  AND   9.44e3 1.02e4 1.10e4 1.18e4 1.27e4 1.36e4 1.45e4 1.57e4 1.71e4  5 United … ARE   1.33e5 1.41e5 1.49e5 1.57e5 1.65e5 1.74e5 1.83e5 1.91e5 2.14e5  6 Argenti… ARG   2.03e7 2.07e7 2.10e7 2.14e7 2.17e7 2.21e7 2.24e7 2.28e7 2.31e7  7 Armenia  ARM   1.90e6 1.97e6 2.04e6 2.11e6 2.17e6 2.23e6 2.30e6 2.36e6 2.42e6  8 Antigua… ATG   5.53e4 5.62e4 5.70e4 5.78e4 5.87e4 5.96e4 6.06e4 6.16e4 6.27e4  9 Austral… AUS   1.03e7 1.05e7 1.07e7 1.10e7 1.12e7 1.14e7 1.17e7 1.18e7 1.20e7 10 Austria  AUT   7.05e6 7.09e6 7.13e6 7.18e6 7.22e6 7.27e6 7.32e6 7.38e6 7.42e6 # ℹ 183 more rows # ℹ 54 more variables: `1969` <dbl>, `1970` <dbl>, `1971` <dbl>, `1972` <dbl>, #   `1973` <dbl>, `1974` <dbl>, `1975` <dbl>, `1976` <dbl>, `1977` <dbl>, #   `1978` <dbl>, `1979` <dbl>, `1980` <dbl>, `1981` <dbl>, `1982` <dbl>, #   `1983` <dbl>, `1984` <dbl>, `1985` <dbl>, `1986` <dbl>, `1987` <dbl>, #   `1988` <dbl>, `1989` <dbl>, `1990` <dbl>, `1991` <dbl>, `1992` <dbl>, #   `1993` <dbl>, `1994` <dbl>, `1995` <dbl>, `1996` <dbl>, `1997` <dbl>, …
```

```{r}

## Inner joining the two tables to get one table with only those countries that have a matching iso code
wpop <- wpop_full |> inner_join(iso_codes, by = c("Country Code" = "iso3") )

head(wpop)
#View(wpop)
```

## **Exercise 5**

Show the countries/areas which have the same ISO country code in both `wpop` and `iso_codes` but different (spellings of) country names.

```         
# A tibble: 28 × 3    name                              code  country                  <chr>                             <chr> <chr>                  1 Afghanistan[b]                    AFG   Afghanistan            2 Bahamas                           BHS   Bahamas, The           3 Bolivia, Plurinational State of   BOL   Bolivia                4 China[b]                          CHN   China                  5 Côte d'Ivoire                     CIV   Cote d'Ivoire          6 Congo, Democratic Republic of the COD   Congo, Dem. Rep.       7 Congo                             COG   Congo, Rep.            8 Cyprus[b]                         CYP   Cyprus                 9 Egypt                             EGY   Egypt, Arab Rep.      10 Micronesia, Federated States of   FSM   Micronesia, Fed. Sts. # ℹ 18 more rows
```

```{r}

## Making a local version of the iso table and selecting only "Country Name", "Country Code" and "name"
ex5_wpop <- wpop[, c(1, 2,66)]

## Filtering where "Country Name" is different from "name", i.e. where the name of the country is different
ex5_wpop <- ex5_wpop |> filter(`Country Name` != name)

head(ex5_wpop)
#View(ex5_wpop)

```

## **Exercise 6**

Use the package `rvest` to read in the list of countries with corresponding continent codes from the main table at <https://en.wikipedia.org/wiki/List_of_sovereign_states_and_dependent_territories_by_continent_(data_file)> and select/deselect and rename columns so you end up with a tibble (`tbl`) named `continents` with 253 rows and 2 columns with names as shown in the output below.

**Important hint:** you need `convert = FALSE` in `html_table()` to avoid the text string `"NA"` (North America) to be interpreted as missing data (Not Available).

```         
continents
```

```         
# A tibble: 253 × 2    continent iso3     <chr>     <chr>  1 AS        AFG    2 EU        ALB    3 AN        ATA    4 AF        DZA    5 OC        ASM    6 EU        AND    7 AF        AGO    8 NA        ATG    9 AS        AZE   10 SA        ARG   # ℹ 243 more rows
```

```{r}
ex6_wiki_jump <- 'https://en.wikipedia.org/wiki/List_of_sovereign_states_and_dependent_territories_by_continent_(data_file)'


##Gets the tables from the url
ex6_long_jump <- read_html(ex6_wiki_jump)
ex6_tbl <- ex6_long_jump |>
  html_elements("table") |> # use html_elements() for all tables
  html_table(convert = FALSE)
ex6_tbl |> head()
## The table we need pertaining country name and other information is the third (3) table
ex6_tbl2 <- ex6_tbl[[3]]
## removing columns that are not required, iso 2, numeric value and link
ex6_tbl2 <- ex6_tbl2[, -c(2,4,5)]

## Renaming the column headers
continents <- ex6_tbl2 |> rename(continent = 1) |> rename(iso3 = 2)

head(continents)
```

## **Exercise 7**

Make a new dataset `wpop2` by extending `wpop` with the extra column `continent` from the `continents` data (possibly using `relocate()` to move the `continent` column to the left to see it more clearly).

```         
wpop2
```

```         
# A tibble: 193 × 66    continent country      code  `1960` `1961` `1962` `1963` `1964` `1965` `1966`    <chr>     <chr>        <chr>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  1 AS        Afghanistan  AFG   8.62e6 8.79e6 8.97e6 9.16e6 9.36e6 9.57e6 9.78e6  2 AF        Angola       AGO   5.36e6 5.44e6 5.52e6 5.60e6 5.67e6 5.74e6 5.79e6  3 EU        Albania      ALB   1.61e6 1.66e6 1.71e6 1.76e6 1.81e6 1.86e6 1.91e6  4 EU        Andorra      AND   9.44e3 1.02e4 1.10e4 1.18e4 1.27e4 1.36e4 1.45e4  5 AS        United Arab… ARE   1.33e5 1.41e5 1.49e5 1.57e5 1.65e5 1.74e5 1.83e5  6 SA        Argentina    ARG   2.03e7 2.07e7 2.10e7 2.14e7 2.17e7 2.21e7 2.24e7  7 AS        Armenia      ARM   1.90e6 1.97e6 2.04e6 2.11e6 2.17e6 2.23e6 2.30e6  8 NA        Antigua and… ATG   5.53e4 5.62e4 5.70e4 5.78e4 5.87e4 5.96e4 6.06e4  9 OC        Australia    AUS   1.03e7 1.05e7 1.07e7 1.10e7 1.12e7 1.14e7 1.17e7 10 EU        Austria      AUT   7.05e6 7.09e6 7.13e6 7.18e6 7.22e6 7.27e6 7.32e6 # ℹ 183 more rows # ℹ 56 more variables: `1967` <dbl>, `1968` <dbl>, `1969` <dbl>, `1970` <dbl>, #   `1971` <dbl>, `1972` <dbl>, `1973` <dbl>, `1974` <dbl>, `1975` <dbl>, #   `1976` <dbl>, `1977` <dbl>, `1978` <dbl>, `1979` <dbl>, `1980` <dbl>, #   `1981` <dbl>, `1982` <dbl>, `1983` <dbl>, `1984` <dbl>, `1985` <dbl>, #   `1986` <dbl>, `1987` <dbl>, `1988` <dbl>, `1989` <dbl>, `1990` <dbl>, #   `1991` <dbl>, `1992` <dbl>, `1993` <dbl>, `1994` <dbl>, `1995` <dbl>, …
```

```{r}
## Making a copy of wpop and continents for exercise 7
ex7_wpop <- wpop
ex7_continents <- continents

## joining wpop and continents
wpop2 <- ex7_wpop |> inner_join(ex7_continents, by = c("Country Code" = "iso3") )

## Moving the column with continents (48) to the first column
wpop2 <- wpop2 |> relocate(68, .before = 1)

head(wpop2)
```

## **Exercise 8**

Use `pivot_longer()` to reshape `wpop2` into “long format” with columns as shown below (in particular make sure `year` is a numeric variable) and call the resulting tibble `pop_long`.

```         
pop_long
```

```         
# A tibble: 12,159 × 5    continent country     code   year      pop    <chr>     <chr>       <chr> <dbl>    <dbl>  1 AS        Afghanistan AFG    1960  8622466  2 AS        Afghanistan AFG    1961  8790140  3 AS        Afghanistan AFG    1962  8969047  4 AS        Afghanistan AFG    1963  9157465  5 AS        Afghanistan AFG    1964  9355514  6 AS        Afghanistan AFG    1965  9565147  7 AS        Afghanistan AFG    1966  9783147  8 AS        Afghanistan AFG    1967 10010030  9 AS        Afghanistan AFG    1968 10247780 10 AS        Afghanistan AFG    1969 10494489 # ℹ 12,149 more rows
```

```{r}
## Making a local copy
ex8_wpop <- wpop2

## Using the pivot_longer to make the data set in long format, where columns 1960-2022 is now in a column named year with population in the next column
pop_long <- ex8_wpop |> pivot_longer(cols = '1960':'2022', names_to = "year", values_to = "pop" )

## Removes unused columns
pop_long <- pop_long[, c(-4, -5)]

## Making year into doubles
pop_long <- pop_long |> mutate(year = as.numeric(year))

head(pop_long)
## View(pop_long)

```

## **Exercise 9**

Make a line plot showing the population over all the years in the data with one line per country with semi-transparent lines.

```{r}
## Using the long list, removing two columns
ex9_wpop <- pop_long[, -c(1, 3)]

## Building a ggplot graph
ex9_wpop_final <- ggplot(ex9_wpop, aes(x = year, y = pop, group = `Country Name`)) + 
  geom_line(alpha = 0.1)+
  ## geom_point()+ 
  labs(x = "Year", y = "Population")

ex9_wpop_final


```

## **Exercise 10**

Use the code below to rescale each country’s population size to an population index which in 1 for every country in 1960. An index value of e.g. 2 would mean that the population size of that country has doubled since 1960.

```{r}
ex10_pop_long <- pop_long |> rename(country = 2) |> rename(code = 3) |> rename(pop = 5)
##pop_index <- ex10_pop_long |> 
##  group_by('Country Name',continent, 'Country Code') |> 
##  mutate(pop_index = pop/pop[1])

pop_index <- ex10_pop_long |> 
  group_by(country,continent,code) |> 
  mutate(pop_index = pop/pop[1])

```

## **Exercise 11**

Make a line plot showing the indexed population numbers over all the years in the data with one line per country with semi-transparent lines.

```{r}

ex11_pl_pop <- ggplot(pop_index, aes(x = year, y = pop_index, group = country)) +
  geom_line(alpha = .1) +
  labs(x = "Year", y = "Population")

print(ex11_pl_pop)

```

## **Exercise 12**

Identify the two countries with extreme population indices and make a new line plot showing the indexed population numbers over all the years in the data with one line per country with semi-transparent lines **without these two countries**.

```{r}

## ex12_pl_pop <- pop_index |> filter(country != 'Qatar')

ex12_pl_pop <- pop_index |> filter(!country %in% c('Qatar', 'United Arab Emirates')) 

ex12_final <- ggplot(ex12_pl_pop, aes(x = year, y = pop_index, group = country)) +
  geom_line(alpha = .1) +
  labs(x = "Year", y = "Population")

print(ex12_final)

```

## **Exercise 13**

Run the following command and describe in a few words what the result `growth_long` is

```{r}
## Making sure the headers are correct for the standard code
ex13_pop_long <- pop_long |> rename(continent = 1) |> rename(country = 2) |> rename(code = 3) |> rename(pop = 5)

## Firstly it groups the countries, continents and code
## The original table had a year and a population for that year (year 1960, pop = 1.000 and year 1961, pop = 1.019). Now, using the reframe command, it is converted in to population start (1.000), which is the population previoulsy noted for that year (1960) and a population end (1.019) which is the population for the next year (1961). Growth is calculated to be the change in the population from year 1 (1960) to year 2 (1961). The result is that for year 1961 pop start was 1.000 and pop end was 1.019, growth being 100*(1019-1000)/1000 = 1,9
growth_long <- ex13_pop_long |> 
  group_by(country,continent,code) |> 
  reframe(pop_start = pop[1:(length(pop)-1)], 
          pop_end = pop[2:length(pop)], 
          growth = 100*(pop_end-pop_start)/pop_start, 
          end_year = year[2:length(year)])
```

## **Exercise 14**

Make a line plot showing the population over all the years in the data with one line per country with semi-transparent lines

```{r}
## Using the growth_long data set having end-year on and growth on y
ex14_final <- ggplot(growth_long, aes(x = end_year, y = growth, group = country)) +
  geom_line(alpha = .1) +
  labs(x = "Year", y = "Year-to-year population growth in pct.")

print(ex14_final)


```

## **Exercise 15**

Make a similar graphic as above but with one panel/facet per continent.

```{r}
## Building a ggplot with end_year on x and growth on y (similar to ex 11) but this time having them in a graph per continent
ex15_final <- ggplot(growth_long, aes(x = end_year, y = growth, group = country)) + 
  geom_line(alpha = .1) + 
  labs(x = "Year", y = "Year-to-year population growth in pct.") 

## This is the command to show them according to continent
ex15_final + facet_wrap(~continent)
  

#print(ex15_final)

```

## **Exercise 16**

For each country find both the largest positive and the smallest (most negative) growth over the years in the data so you end up with a tibble (`tbl`) named `growth_range` with 193 rows and 3 columns with names as shown in the output below. *hint: `group_by()` and `summarise()` are your friends.*

```         
growth_range
```

```         
# A tibble: 193 × 3    country             max_growth min_growth    <chr>                    <dbl>      <dbl>  1 Afghanistan              16.1     -10.7    2 Albania                   3.17     -1.21   3 Algeria                   4.93      1.36   4 Andorra                   8.47     -3.16   5 Angola                    3.83      0.698  6 Antigua and Barbuda       2.05     -0.577  7 Argentina                 1.72      0.256  8 Armenia                   3.54     -3.28   9 Australia                 3.44      0.141 10 Austria                   1.13     -0.265 # ℹ 183 more rows
```

```{r}
## selecing only country and growth from growth_long. Grouping them by country and finding the max and min value for each coutry
growth_range <- growth_long |> select(country, growth) |> group_by(country) |> summarise(max_growth = max(growth), min_growth = min(growth))

```

## **Exercise 17**

Find the 10 countries which have experienced the largest growth percentage of all at some point over the years in the data.

```         
top10
```

```{r}
## arranges the growth_range by max_growth then removes all rows after the first 10
top10 <- growth_range |> arrange(desc(max_growth)) |> slice_head(n = 10)

print(top10)
```

## **Exercise 18**

Find the 10 countries which have experienced the most negative growth percentage of all at some point over the years in the data.

```         
bottom10
```

```{r}
## arranges the growth_range by min_growth then removes all rows after the first 10
bottom10 <- growth_range |> arrange(min_growth) |> slice_head(n = 10)

print(bottom10)
```

## **Exercise 19**

Make a line plot showing the population over all the years in the data with different colours for each country represented in `top10`.

```{r}
## Making a copy of top10
ex19_top10 <- top10

## joining top10 with growth_long by country, where the countries exist in both tables and only selecting country, growth and end_year
ex19_top10_final <- inner_join(ex19_top10, growth_long, by = 'country') |> select(country, growth, end_year)

## Making the ggplot
ex19_top10_final_plot <- ex19_top10_final |> ggplot(aes(x = end_year, y = growth, colour = country)) +
  geom_line(alpha = 4) +
  labs(x = "end_year", y = "growth") ## The labels on the x and y axis

## Showing the plot
print(ex19_top10_final_plot)



```

## **Exercise 20**

Use `pivot_wider()` to reshape `growth_long` to wide format with one column per year and call the result `growth`.

```         
growth
```

```{r}

## Making a local copy and removing pop_start and pop_end
ex20_wpop <- growth_long[, c(-4, -5)]

## Using the pivot_wider to make the data set in wide format, where end_year is moved up as a header and the growth and the values
growth <- ex20_wpop |> pivot_wider(names_from = end_year, values_from = growth) |> group_by(country)

head(growth)
```

## **Exercise 21**

Make a hierarchical clustering of the growth data in 9 groups. The following hints can be used to achieve this:

1.  Remove non-numerical columns from data

2.  Calculate distances

3.  Use `hclust()` to run the clustering algorithm.

4.  Use `cutree()` to make the cluster labels.

5.  Use mutate to add the cluster label as a variable to `growth`

```{r}
## Making a local version
ex21_growth <- growth[, -c(1, 2, 3)]

## Calculating distance
ex21_growth_dvec <- dist(ex21_growth, method = "euclidean")

## Making the clustering
ex21_growth_hc <- hclust(ex21_growth_dvec)

## No cluster diagram is required, but this code provides a diagram
## rect.hclust(ex21_growth_hc, k = 9, border = 2:5)
## plot(ex21_growth_hc)
## View(ex21_growth_hc)

## Using 9 clusters to organize
clusters <- c(9)
cl <- cutree(ex21_growth_hc, k=clusters) |> as.data.frame()
cl |> head(5)

## Changing the name of the cluster column to "clust"
names(cl) <- paste0("clust")
rownames(cl) <- ex21_growth_hc$labels

## Combining the cluster output (cl) and the original "growth" dataframe
growth_clust <- cl |> mutate(growth)

## Making the clust column into a factor and not an int
growth_clust$clust <- as.factor(growth_clust$clust)

head(growth_clust)

```

## **Exercise 22**

Use `group_split()` and `lapply()` similarly to below to extract the countries of each cluster and display them nicely with `pander::pander()`:

```         
growth_clust |>    group_split(clust) |>    lapply(function(x) x$country) |>    pander::pander()
```

```{r}
growth_clust |> 
  group_split(clust) |> 
  lapply(function(x) x$country) |> 
  pander::pander()
```

## **Exercise 23**

Use `pivot_longer()` to convert `growth_clust` to long format and plot growth as a function of time with a panel/facet for each cluster.

```{r}
## Using the pivot_longer to make the data set in long format, where columns 1961-2022 is now in a column named year with population growth in procent in the next column
growth_clust_long <- growth_clust |> pivot_longer(cols = '1961':'2022', names_to = "year", values_to = "pop_growth_pct")


## Removes unused columns
growth_clust_long <- growth_clust_long[, c(-3, -4)]

## making year into a nummeric value, so it can scale in sequence later on
growth_clust_long$year <- as.numeric(growth_clust_long$year)

head(growth_clust_long)

## Making the plot with year on x and population growth on y, grouped by country. scale on x is set to the years from 1960 to 2022, with two decades spread and spread on y-axis from -25 to 25
ex23_final <- ggplot(growth_clust_long, aes(x = year, y = pop_growth_pct, group = country))+ 
  geom_line(alpha = 1)  + 
  labs(title = "Growth in percent by clusters", x = "year", y = "Growth") + 
  ## theme_minimal() +
  scale_x_continuous(breaks = seq(1960, 2022, by = 20)) + 
  scale_y_continuous(limits = c(-25, 25))

ex23_final + facet_wrap(~clust, scales = "free")



```

## **Exercise**

The code below can be used to calculate average growth rates over several years.

```         
agg_year <- 5 aggr_growth_long <- growth_long |>   mutate(period=((end_year - min(end_year)) %/% agg_year) * agg_year + min(end_year)) |>    group_by(period, code, country, continent) |> summarise(pop = mean(growth))
```

Use the clustering technique of the previous exercise to divide the data into different clusters. Experiment with several period lengths (aggregation years) and number of clusters and show results for at least one combination of `agg_year` and number of clusters. An example is given below.

```{r}
## Inserted code from exercise
agg_year <- 5
aggr_growth_long <- growth_long |>
  mutate(period=((end_year - min(end_year)) %/% agg_year) * agg_year + min(end_year)) |> 
  group_by(period, code, country, continent) |> summarise(pop = mean(growth))

aggr_growth_long

ex24_final <- ggplot(aggr_growth_long, aes(x = period, y = pop, group = country))+ 
  geom_line(alpha = 0.1)  + 
  labs(title = "x", x = "year", y = "Population") + 
  ## theme_minimal() +
  scale_x_continuous(breaks = seq(1960, 2022, by = 20)) + 
  scale_y_continuous(limits = c(-10, 15))

ex24_final
```

```{r}
## Making a local copy and removing pop_start and pop_end
ex24_wpop <- aggr_growth_long[, c(-2, -4)]

## Using the pivot_wider to make the data set in wide format, where end_year is moved up as a header and the growth and the values
ex24_aggr_growth <- ex24_wpop |> pivot_wider(names_from = period, values_from = pop) |> group_by(country)

head(ex24_aggr_growth)


## Making a local version
## ex24_aggr_growth_long <- aggr_growth_long[, -c(2, 4)]

## Calculating distance
ex24_aggr_growth_long_dvec <- dist(ex24_aggr_growth, method = "euclidean")

## Making the clustering
ex24_aggr_growth_long_hc <- hclust(ex24_aggr_growth_long_dvec)

## Using 9 clusters to organize
ex24_clusters <- c(9)
ex24_cl <- cutree(ex24_aggr_growth_long_hc, k=ex24_clusters) |> as.data.frame()
ex24_cl |> head(5)

## Changing the name of the cluster column to "clust"
names(ex24_cl) <- paste0("clust")
rownames(ex24_cl) <- ex24_aggr_growth_long_hc$labels

## Combining the cluster output (ex24_cl) and the original "aggr_growth_long" dataframe
ex24_growth_clust <- ex24_cl |> mutate(ex24_aggr_growth)

## Making the clust column into a factor and not an int
ex24_growth_clust$clust <- as.factor(ex24_growth_clust$clust)

head(ex24_growth_clust)
```

```{r}
ex24_growth_clust |> 
  group_split(clust) |> 
  lapply(function(x) x$country) |> 
  pander::pander()
```

```{r}
## Using the pivot_longer to make the data set in long format, where columns 1961-2022 is now in a column named year with population growth in procent in the next column
ex24_growth_clust_long <- ex24_growth_clust |> pivot_longer(cols = '1961':'2021', names_to = "year", values_to = "pop_growth_pct")


## Removes unused columns
## ex24_growth_clust_01 <- ex24_growth_clust[, c(-3, -5)]

## making year into a nummeric value, so it can scale in sequence later on
## ex24_growth_clust_01$period <- as.numeric(ex24_growth_clust_01$period)

head(ex24_growth_clust_long)

## Making the plot with year on x and population growth on y, grouped by country. scale on x is set to the years from 1960 to 2022, with two decades spread and spread on y-axis from -25 to 25
ex24_final <- ggplot(ex24_growth_clust_long, aes(x = year, y = pop_growth_pct, group = country))+ 
  geom_line(alpha = 0.5)  + 
  labs(title = "Diagram", x = "year", y = "pop") + 
  scale_y_continuous(limits = c(-8, 17))

ex24_final + facet_wrap(~clust, scales = "free")
```
